# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

result_list = ['text', 456, 45.6, None, {1, 2}, [1, 2], (1, 2), {1: 2}, True, b'text', bytearray(b"some text")]
for el in result_list:
    print(type(el))

# 2. Для списка реализовать обмен значений соседних элементов, т.е.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().

n = int(input("Введите число элементов списка: "))
my_list = []
for i in range(0, n):
    el = int(input('Введите число: '))
    my_list.append(el)
print(my_list)
i = 0
for el in range(int(len(my_list) / 2)):
    my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]
    i += 2
print(my_list)

#3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

my_dict = {'Зима': [1, 2, 12],
           'Весна': [3, 4, 5],
           'Лето': [6, 7, 8],
           'Осень': [9, 10, 11]}
n = int(input('Введите месяц в виде целого числа от 1 до 12: '))
for key in my_dict.keys():
    if n in my_dict[key]:
        print(key)

#4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если в слово длинное, выводить только первые 10 букв в слове.

words = list(input('Ведите строку из нескольких слов, разделённых пробелами: ').split())
print(words)
for number, word in enumerate(words, 1):
    word = word if len(word) <= 10 else word[:10]
    print(number, word)

#5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# не сорт и не реверс

my_list = [7, 5, 3, 3, 2]
print(my_list)
number = int(input("Введите элемент рейтинга: "))
count = 0
for i in range(int(len(my_list))):
   if number >= my_list[count]:
       my_list.insert(count + my_list.count(number), number)
       break
   count += 1
if my_list.count(number) == 0:
    my_list.append(number)
print(my_list)

#*Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента —
# номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
#Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.

items = []
my_dict = {
    'название': [],
    'цена': [],
    'количество': [],
    'ед': []
}
count = int(input('Введите количеств позиций: '))
n = 1
while count >= n:
    item_name = input(f'Введите наименование {n} товара: ')
    my_dict['название'].append(item_name)
    item_price = input(f'Введите цену {item_name}: ')
    my_dict['цена'].append(item_price)
    item_qty = input(f'Введите количество {item_name}: ')
    my_dict['количество'].append(item_qty)
    item_meas = input(f'Введите единицу измерения {item_name}: ')
    my_dict['ед'].append(item_meas)
    ite = (n, {'название': item_name, 'цена': item_price, 'количество': item_qty, 'ед': item_meas})
    items.append(ite)
    n += 1
print(items)