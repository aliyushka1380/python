#1)	Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

number_1 = int(input("Введите делимое: "))
number_2 = int(input("Введите делитель: "))
def my_func(a, b):
    try:
        return a / b
    except ZeroDivisionError:
        return print('Нужно было ввести делитель не равный 0')
print(my_func(number_1, number_2))

#2)	Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.

def info(name, surname, year, city, email, tel):
    print(f"Имя - {name}; фамилия - {surname}; год рождения - {year}; город проживания - {city}; email - {email}; телефон - {tel}")
info(name='Вася', surname='Пупкин', year='1990', city='Казань', email='vasya@mail.ru', tel='123456')

#3)	Реализовать функцию my_func(), которая принимает три позиционных аргумента,
# и возвращает сумму наибольших двух аргументов.

def sum_max(var_1, var_2, var_3):
    my_list = [var_1, var_2, var_3]
    my_list.remove(min(my_list))
    return sum(my_list)

print(sum_max(20, 2, 5))

#4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y).
# При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами.
# Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

x = float(input('Введите действительное положительное число: '))
y = int(input('Введите целое отрицательное число: '))

# def my_func_1(x, y):
#     return 1 / x ** abs(y)
my_func_1 = lambda x, y: 1 / x ** abs(y)
print(my_func_1(x, y))


def my_func_2(x, y):
    for i in range(abs(y)-1):
        x *= x
    return 1 / x

print(my_func_2(x, y))

#5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел.
# Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введен после нескольких чисел,
# то вначале нужно добавить сумму этих чисел к полученной ранее сумме
# и после этого завершить программу.

def my_func():
    res = 0
    while True:
        numbers = input('Введите строку чисел, разделенных пробелом, или * чтобы завершить выполнение программы: ').split()
        for i in numbers:
            try:
                if i == '*':
                    print(f'Сумма равна {res}')
                    return
                else:
                    res += int(i)
            except ValueError:
                print('Введите число или *')
        print(f'Сумма равна {res}')

my_func()

#6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же,
# но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки,
# но каждое слово должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().

def my_func(word):
    small = word[0]
    big = chr(ord(small) - ord('a') + ord('A'))
    return big + word[1:]

my_result = input('Введите строку из слов, разделенных пробелом: ' ).split()
res = []
for word in my_result:
    res.append(my_func(word))
print(' '.join(res))