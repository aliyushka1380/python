#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
from sys import argv
script_name, first_param, second_param, third_param = argv

print("Имя скрипта: ", script_name)
print("выработка в часах: ", first_param)
print("ставка в час: ", second_param)
print("премия: ", third_param)
print(f"расчет заработной платы сотрудника: {(float(first_param) * float(second_param)) + float(third_param)}")

#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых
# больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [my_list[i] for i in range(1, len(my_list)) if my_list[i] > my_list[i - 1]]
print(new_list)

#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

my_set = [el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]
print(my_set)

#4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print(my_list)
new_list = [el for el in my_list if my_list.count(el) == 1]
print(new_list)

#5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
new_list = [el for el in range(100, 1000 + 1) if el % 2 == 0]
print(new_list)
def my_func(prev_el, el):
    return prev_el * el

print(reduce(my_func, new_list))

#6. Реализовать два небольших скрипта:
# а) бесконечный итератор, генерирующий целые числа, начиная с указанного,
# б) бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.

from sys import argv
from itertools import count, cycle
script_name, first_param, second_param = argv

my_list = []
for el in count(int(first_param)):
    if el > 15:
        break
    else:
        my_list.append(el)
print(my_list)

c = 0
for n in cycle(my_list):
    if c > int(second_param):
        break
    print(n)
    c += 1

#7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fibo_gen(). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые 15 чисел.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    el = 1
    for i in range(1, n + 1):
        el *= i
        yield el

for a in fact(int(input("Для какого числа нужно вычислить факториал: \n"))):
    print(a)
